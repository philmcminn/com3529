#!/usr/bin/env ruby

$repos = {
  2 => "https://github.com/DanPerry1808/com3529Project",
  3 => "https://github.com/Bazif-Khan/COM3529-Software-Testing-and-Analysis",
  4 => "https://github.com/hollandjake/McTest",
  5 => "https://github.com/zl1n/fasttester",
  6 => "https://github.com/IcyHao/Com3529_assignment",
  7 => "https://github.com/Gizs/COM3529Assignment.git",
  8 => "https://github.com/aca18klc/crispy-invention.git",
  9 => "https://github.com/HubertKrawczyk/com3529-assignment",
  10 => "https://github.com/SpruceMarcy/COM3529-Assignment",
  11 => "https://github.com/bradleyrumball/AutoLogic",
  12 => "https://github.com/Tiltorito/test-impress",
  13 => "https://github.com/muneebnadeem/COM3529-Testing-Assignment",
  14 => "https://github.com/Akeyo21/Automatic-Software-Tester",
  15 => "https://github.com/EdiZaharia/Software-Testing-and-Analysis-Assignment",
  16 => "https://github.com/awise1/COM3529-assignment",
  17 => "https://github.com/Klodivio355/Software_Testing",
  18 => "https://github.com/przemo199/Software-Testing-And-Analysis-Assignment",
  19 => "https://github.com/ike-private/COM3529-Software-Testing-And-Analysis",
  20 => "https://github.com/SavvasSolomou/COM3529Assignment",
  21 => "https://github.com/acc17cg/com3529_assignment.git",
  22 => "https://github.com/ArtKelly/COM3529SoftwareTesting",
  23 => "https://github.com/acc18ah/com3529-assignment",
  24 => "https://github.com/DistressedWhale/SoftwareTesting",
  25 => "https://github.com/nickjaycee/Com3529Assignment",
  26 => "https://github.com/JMarsh99/COM3529Assignment",
  27 => "https://github.com/acb18hl/Com3529",
  28 => "https://github.com/JustinZhangg/COM3529_assignment1",
  29 => "https://github.com/VineetGupta-1/com3529-assignment.git",
  30 => "https://github.com/felixwork21/Felix-COM3529-Assignment1",
  31 => "https://github.com/ambroser53/com3529Assignment.git",
  32 => "https://github.com/dgray4/com2529-assignment",
  33 => "https://github.com/leighton-grabyo/COM3529",
  34 => "https://github.com/Quantus2/COM3529assignment",
  35 => "https://github.com/BrynBerkeley/SoftwareTestingAssignment",
  36 => "https://github.com/Nwosu-Gabriel/COM3529-Assignment",
  37 => "https://github.com/MathhewDu/com3529.git",
  38 => "https://github.com/ace18zz/COM3529Assignment.git",
  39 => "https://github.com/Lwng8/com-3529"
}

$nos_in_team = {
  2 => 1,
  3 => 2,
  4 => 2,
  5 => 2,
  6 => 1,
  7 => 1,
  8 => 2,
  9 => 1,
  10 => 1,
  11 => 2,
  12 => 1.5,
  13 => 1,
  14 => 1,
  15 => 1,
  16 => 1,
  17 => 1,
  18 => 1,
  19 => 2,
  20 => 1,
  21 => 3,
  22 => 1,
  23 => 1,
  24 => 1,
  25 => 1,
  26 => 1,
  27 => 1,
  28 => 1,
  29 => 1,
  30 => 1,
  31 => 2,
  32 => 1,
  33 => 2,
  34 => 2,
  35 => 1,
  36 => 1,
  37 => 1,
  38 => 1,
  39 => 1
}

$scheme = {
  1 => 2,
  1.5 => 3,
  2 => 4,
  3 => 5
}

$range = (2..39)
$late = [22, 29, 24, 36, 28, 26, 32, 10, 33, 39]
$deadline = "Mon 26 17:01 2021"
$categories = 7
$mark = "Mark:"
$overall_mark = "__Overall Mark:__"
$file = "feedback-and-mark.md"


def clone_repo(n, date=nil) 
  repo_url = $repos[n]
  `git clone #{repo_url} #{n}`
end

def clone_non_late
  $range.each do |n|
    unless $late.include? n
      clone_repo(n, $deadline)
    end
  end
end

def clone_all
  $range.each do |n|
    clone_repo(n, $deadline)
  end
end

def revert_to_deadline_version(team)
  Dir.chdir("#{team}")
  branch = `git symbolic-ref --short HEAD`
  version = `git rev-list -1 --before=\"#{date}\" #{branch}`
  `git checkout #{version}`
  Dir.chdir("..")
end

def update_to_latest_version(team)

end

def test_push_late
  $range.each do |n|
    if $late.include? n
      test_push(n)
    end
  end  
end

def test_push_non_late
  $range.each do |n|
    unless $late.include? n
      test_push(n)
    end
  end  
end

def test_push(team)
  puts "Test pushing team #{team}"
  file = "test-push"
  Dir.chdir("#{team}")
  File.write(file, "")
  `git add test-push`
  `git commit -a -m "Automated push test – ignore"`
  `git push`
  File.delete(file)
  `git commit -a -m "Automated push test – ignore"`
  `git push` 
  Dir.chdir("..")  
end

def total_marks
  $range.each do |n|
    total_mark_for_file(n)
  end
end

def test_total_mark
  total_mark_for_file(12)
end

def total_mark_for_file(team)
  lines = ""
  marks = []
  encountered_overall_mark = false

  file = "marking/#{team}.md"

  unless File.exist?(file)
    puts "No file #{file}"
    return
  end

  File.readlines(file).each do |line|    
    if line.start_with?($mark)
      mark = line.scan(/\d+/).first
      marks << mark.to_i
    end

    if line.start_with?($overall_mark)
      line = overall_mark(team, file, marks)
      encountered_overall_mark = true
    end

    lines += line
  end

  unless encountered_overall_mark
    lines += "\n---\n\n"
    lines += overall_mark(team, file, marks)
  end

  File.write(file, lines)
end

def overall_mark(team, file, marks)
  no_of_marks = marks.length
  abort "Aborting: file #{file} only has #{no_of_marks} categories" unless no_of_marks == $categories

  people = $nos_in_team[team]
  scheme = $scheme[people]

  marks = marks.sort.reverse
  
  total = 0
  (0..scheme-1).each do |n|
    total += marks[n]
  end
  
  mark = (total / scheme.to_f).round(1)

  puts "#{team}, #{mark}"
  "#{$overall_mark} #{mark}% (Number of people in team: #{people}, scheme: average of top #{scheme} grades)"
end

def push_all
end

abort("No function specified") if ARGV.length.zero?
eval(ARGV[0])
